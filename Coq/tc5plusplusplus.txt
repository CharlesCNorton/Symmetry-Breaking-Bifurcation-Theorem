Require Import Reals.
Require Import Coq.micromega.Lra.
Require Import Coq.Reals.Rpower.
Require Import Coq.Init.Nat.
Require Import Coq.Lists.List.
Import ListNotations.

Open Scope R_scope.

Record FiniteGroup : Type := {
  carrier : Type;
  op : carrier -> carrier -> carrier;
  e : carrier;
  inv : carrier -> carrier;
  op_assoc : forall x y z, op x (op y z) = op (op x y) z;
  op_e_l : forall x, op e x = x;
  op_e_r : forall x, op x e = x;
  op_inv_l : forall x, op (inv x) x = e;
  op_inv_r : forall x, op x (inv x) = e;
  (* Instead of storing an existential in Prop, we store a sigma-type in Type *)
  carrier_enum : { l : list carrier | NoDup l /\ forall a : carrier, In a l }
}.

Definition group_card (G : FiniteGroup) : nat :=
  length (proj1_sig G.(carrier_enum)).

Parameter G_d : FiniteGroup.

Parameter nontrivial_group : (1 <= group_card G_d)%nat.

Definition A_d : R := INR (group_card G_d).

Lemma A_d_pos : 0 < A_d.
Proof.
  unfold A_d.
  apply lt_0_INR.
  apply nontrivial_group.
Qed.

Definition d : nat := 3.

Lemma d_min : (2 <= d)%nat.
Proof.
  unfold d. auto.
Qed.

Definition euler_char (dim : nat) : Z :=
  match dim with
  | 2 => 1
  | 3 => 2
  | _ => 0
  end.

Definition chi_d : R := IZR (euler_char d).

Parameter chi_d_nonneg : 0 <= chi_d.

Parameter k_fun : nat -> R.
Parameter B_fun : nat -> R.
Parameter C_fun : nat -> R.

Definition k_d : R := k_fun d.
Definition B_d : R := B_fun d.
Definition C_d : R := C_fun d.

Parameter k_d_pos : 0 < k_d.
Parameter B_d_pos : 0 < B_d.
Parameter C_d_pos : 0 < C_d.

Definition n : nat := 6.

Lemma n_min : (2 <= n)%nat.
Proof.
  unfold n. auto.
Qed.

Definition nR : R := INR n.

Lemma nR_pos : 0 < nR.
Proof.
  unfold nR, n.
  apply lt_0_INR.
  auto with arith.
Qed.

Definition t_c : R := 0.5.

Lemma t_c_in_interval : 0 <= t_c <= 1.
Proof.
  unfold t_c. split; lra.
Qed.

Definition ε : R := 0.1.

Lemma epsilon_in_interval : 0 < ε < 1.
Proof.
  unfold ε. split; lra.
Qed.

Definition regularizedBase (t : R) : R := t - t_c + ε.

Lemma regularizedBase_pos :
  forall t : R, t_c <= t -> 0 < regularizedBase t.
Proof.
  intros t H.
  unfold regularizedBase, t_c, ε in *.
  lra.
Qed.

Lemma Rpower_pos : forall x y : R, 0 < x -> 0 < Rpower x y.
Proof.
  intros x y H.
  unfold Rpower.
  apply exp_pos.
Qed.

Definition DeltaG_dim (t : R) : R :=
  if Rle_dec t t_c then 0
  else (A_d / Rpower nR k_d)
       * Rpower (regularizedBase t) (B_d + C_d).

Lemma DeltaG_dim_zero_up_to_t_c :
  forall t : R, t <= t_c -> DeltaG_dim t = 0.
Proof.
  intros t H.
  unfold DeltaG_dim.
  destruct (Rle_dec t t_c).
  - reflexivity.
  - lra.
Qed.

Lemma DeltaG_dim_pos_after_t_c :
  forall t : R, t_c < t -> 0 < DeltaG_dim t.
Proof.
  intros t H.
  unfold DeltaG_dim.
  destruct (Rle_dec t t_c).
  - lra.
  - unfold A_d, nR, k_d, regularizedBase, B_d, C_d, t_c, ε in *.
    apply Rmult_lt_0_compat.
    + apply Rdiv_lt_0_compat.
      * apply lt_0_INR.
        apply nontrivial_group.
      * apply Rpower_pos.
        apply nR_pos.
    + apply Rpower_pos.
      lra.
Qed.

Theorem SymmetryBreaking_Bifurcation :
  forall t : R,
    0 <= t <= 1 ->
    (if Rle_dec t t_c then DeltaG_dim t = 0 else 0 < DeltaG_dim t).
Proof.
  intros t [Hlow Hhigh].
  destruct (Rle_dec t t_c).
  - rewrite (DeltaG_dim_zero_up_to_t_c t r).
    reflexivity.
  - apply DeltaG_dim_pos_after_t_c.
    lra.
Qed.
